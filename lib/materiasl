import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:shop_apllication_1/modals/rawMaterialsModal.dart';
import '../globals.dart';

class MaterialDetailPage extends StatefulWidget {
  final String? token;
  final Future<void> Function() getMaterial;
  final List<RawMaterial> rawMaterial;
  final String groupName;
  final String idIndustry;
  final String idGroup;

  MaterialDetailPage({
    Key? key,
    required this.rawMaterial,
    required this.token,
    required this.getMaterial,
    required this.groupName,
    required this.idIndustry,
    required this.idGroup,
  }) : super(key: key);

  @override
  _MaterialDetailPageState createState() => _MaterialDetailPageState();
}

class _MaterialDetailPageState extends State<MaterialDetailPage> {
  // Controllers for text fields
  final TextEditingController itemRawNameController = TextEditingController();
  final TextEditingController sellerBINController = TextEditingController();
  final TextEditingController selerRawContactController = TextEditingController();
  final TextEditingController selerRawCountryController = TextEditingController();
  final TextEditingController importController = TextEditingController();
  final TextEditingController codeitemController = TextEditingController();
  final TextEditingController rawSezonController = TextEditingController();
  final TextEditingController rawModelController = TextEditingController();
  final TextEditingController rawCommentController = TextEditingController();
  final TextEditingController rawPersonController = TextEditingController();
  final TextEditingController rawSizeController = TextEditingController();
  final TextEditingController rawColorController = TextEditingController();
  final TextEditingController rawQuantityController = TextEditingController();
  final TextEditingController rawUnitController = TextEditingController();
  final TextEditingController rawPurchasepriceController = TextEditingController();
  final TextEditingController rawSellingpriceController = TextEditingController();
  final TextEditingController rawExpiryDateController = TextEditingController();

  @override
  void dispose() {
    // Clean up the controllers when the widget is disposed.
    itemRawNameController.dispose();
    sellerBINController.dispose();
    selerRawContactController.dispose();
    selerRawCountryController.dispose();
    importController.dispose();
    codeitemController.dispose();
    rawSezonController.dispose();
    rawModelController.dispose();
    rawCommentController.dispose();
    rawPersonController.dispose();
    rawSizeController.dispose();
    rawColorController.dispose();
    rawQuantityController.dispose();
    rawUnitController.dispose();
    rawPurchasepriceController.dispose();
    rawSellingpriceController.dispose();
    rawExpiryDateController.dispose();
    super.dispose();
  }

  Future<void> addRawMaterial() async {
    try {
      // Создаем объект данных для отправки на сервер
      RawMaterial newItem = RawMaterial(
        itemRawName: itemRawNameController.text,
        sellerBin: sellerBINController.text,
        sellerRawContact: selerRawContactController.text,
        sellerRawCountry: selerRawCountryController.text,
        itemImport: importController.text.toLowerCase() == 'true',
        codeitem: codeitemController.text,
        rawSezon: rawSezonController.text,
        rawModel: rawModelController.text,
        rawComment: rawCommentController.text,
        rawPerson: rawPersonController.text,
        rawSize: rawSizeController.text,
        rawColor: rawColorController.text,
        rawQuantity: int.parse(rawQuantityController.text),
        rawUnit: rawUnitController.text,
        rawPurchaseprice: int.parse(rawPurchasepriceController.text),
        rawSellingprice: int.parse(rawSellingpriceController.text),
        rawExpiryDate: rawExpiryDateController.text,
        id: '',
        rawTotalPurchase: 0, // Замените на реальное значение, если необходимо
        rawTotalSelling: 0, // Замените на реальное значение, если необходимо
      );

      // Отправляем POST запрос на сервер
      final response = await http.post(
        Uri.parse(
            'https://sheltered-peak-32126-a4bd3f8cb65e.herokuapp.com/raw/${widget.idIndustry}/groups/${widget.idGroup}/items'),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer ${widget.token}',
        },
        body: jsonEncode(newItem.toJson()),
      );

      if (response.statusCode == 201) {
        print('Новый элемент сырья успешно добавлен');
        // Выполнение каких-либо действий после успешного добавления
        // Например, очистка полей ввода
        clearTextControllers();
        // Обновление списка материалов, если необходимо
        widget.getMaterial();
      } else {
        print('Ошибка при добавлении элемента сырья: ${response.statusCode}');
        // Обработка ошибок, если необходимо
      }
    } catch (error) {
      print('Ошибка при отправке запроса: $error');
      // Обработка ошибок, если необходимо
    }
  }

  void clearTextControllers() {
    // Очистка всех контроллеров после успешного добавления
    itemRawNameController.clear();
    sellerBINController.clear();
    selerRawContactController.clear();
    selerRawCountryController.clear();
    importController.clear();
    codeitemController.clear();
    rawSezonController.clear();
    rawModelController.clear();
    rawCommentController.clear();
    rawPersonController.clear();
    rawSizeController.clear();
    rawColorController.clear();
    rawQuantityController.clear();
    rawUnitController.clear();
    rawPurchasepriceController.clear();
    rawSellingpriceController.clear();
    rawExpiryDateController.clear();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Детали сырья'),
      ),
      body: SingleChildScrollView(
        padding: EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('Группа: ${widget.groupName}', style: TextStyle(fontSize: 18)),
            SizedBox(height: 20),
            // Ввод данных элемента сырья
            TextFormField(
              controller: itemRawNameController,
              decoration: InputDecoration(labelText: 'Наименование сырья'),
            ),
            TextFormField(
              controller: sellerBINController,
              decoration: InputDecoration(labelText: 'BIN продавца'),
            ),
            TextFormField(
              controller: selerRawContactController,
              decoration: InputDecoration(labelText: 'Контакт продавца'),
            ),
            TextFormField(
              controller: selerRawCountryController,
              decoration: InputDecoration(labelText: 'Страна продавца'),
            ),
            TextFormField(
              controller: importController,
              decoration: InputDecoration(labelText: 'Импорт (true/false)'),
            ),
            TextFormField(
              controller: codeitemController,
              decoration: InputDecoration(labelText: 'Код товара'),
            ),
            TextFormField(
              controller: rawSezonController,
              decoration: InputDecoration(labelText: 'Сезон сырья'),
            ),
            TextFormField(
              controller: rawModelController,
              decoration: InputDecoration(labelText: 'Модель сырья'),
            ),
            TextFormField(
              controller: rawCommentController,
              decoration: InputDecoration(labelText: 'Комментарий к сырью'),
            ),
            TextFormField(
              controller: rawPersonController,
              decoration: InputDecoration(labelText: 'Человек сырья'),
            ),
            TextFormField(
              controller: rawSizeController,
              decoration: InputDecoration(labelText: 'Размер сырья'),
            ),
            TextFormField(
              controller: rawColorController,
              decoration: InputDecoration(labelText: 'Цвет сырья'),
            ),
            TextFormField(
              controller: rawQuantityController,
              decoration: InputDecoration(labelText: 'Количество'),
              keyboardType: TextInputType.number,
            ),
            TextFormField(
              controller: rawUnitController,
              decoration: InputDecoration(labelText: 'Единица измерения'),
            ),
            TextFormField(
              controller: rawPurchasepriceController,
              decoration: InputDecoration(labelText: 'Цена закупки'),
              keyboardType: TextInputType.number,
            ),
            TextFormField(
              controller: rawSellingpriceController,
              decoration: InputDecoration(labelText: 'Цена продажи'),
              keyboardType: TextInputType.number,
            ),
            TextFormField(
              controller: rawExpiryDateController,
              decoration: InputDecoration(labelText: 'Дата истечения срока'),
              keyboardType: TextInputType.datetime,
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                // Вызываем метод для добавления элемента сырья
                addRawMaterial();
              },
              child: Text('Добавить элемент сырья'),
            ),
          ],
        ),
      ),
    );
  }
}
