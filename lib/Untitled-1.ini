import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:shop_apllication_1/getProductModal.dart';

class ShopProductAdmin extends StatefulWidget {
  const ShopProductAdmin({super.key});

  @override
  State<ShopProductAdmin> createState() => _ShopProductAdminState();
}

class _ShopProductAdminState extends State<ShopProductAdmin> {
  List<GetProduct> finishedProduct = [];
  bool isLoading = true;
  String errorMessage = '';


  Future<void> getProduct() async {
    final url = 'http://10.0.2.2:5000/product/all'; // Убедитесь, что URL правильный
    print('Fetching products from: $url'); // Отладочное сообщение
    try {
      final response = await http.get(Uri.parse(url));
      if (response.statusCode == 200) {
        List<dynamic> responseBody = jsonDecode(response.body);
        setState(() {
          finishedProduct = responseBody.map((data) => GetProduct.fromJson(data)).toList();
          isLoading = false;
        });
        print('Successfully fetched products.'); // Отладочное сообщение
      } else {
        setState(() {
          errorMessage = 'Ошибка при получении продуктов: ${response.statusCode}';
          isLoading = false;
        });
        print('Ошибка при получении продуктов: ${response.statusCode}');
        print('Response body: ${response.body}'); // Отладочное сообщение
      }
    } catch (e) {
      setState(() {
        errorMessage = 'Ошибка: $e';
        isLoading = false;
      });
      print('Ошибка: $e');
    }
  }

  @override
  void initState() {
    super.initState();
    getProduct();
  }

  Future<void> updateProductPrice(GetProduct product, int newPrice) async {
    final url = 'http://10.0.2.2:5000/product/update-price/${product.sId}';

    try {
      final response = await http.put(
        Uri.parse(url),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({'productSellingprice': newPrice}),
      );
      if (response.statusCode == 200) {
        await getProduct(); // Обновляем список продуктов
        setState(() {
          product.productSellingprice = newPrice;
        });
        print('Price updated successfully.');
      } else {
        print('Failed to update price: ${response.statusCode}');
      }
    } catch (e) {
      print('Error: $e');
    }
  }

  void showEditPriceDialog(GetProduct product) {
    TextEditingController priceController = TextEditingController(text: product.productSellingprice.toString());

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Изменить цену продажи'),
          content: TextField(
            controller: priceController,
            keyboardType: TextInputType.number,
            decoration: InputDecoration(labelText: 'Новая цена'),
          ),
          actions: <Widget>[
            TextButton(
              child: Text('Отмена'),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
            TextButton(
              child: Text('Сохранить'),
              onPressed: () async {
                final newPrice = int.tryParse(priceController.text);
                if (newPrice != null) {
                  await updateProductPrice(product, newPrice);
                  Navigator.of(context).pop();
                } else {
                  print('Invalid price entered');
                }
              },
            ),
          ],
        );
      },
    );
  }

  void showProductDetails(GetProduct product) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return Dialog(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(20.0),
          ),
          child: Container(
            width: MediaQuery.of(context).size.width * 0.9, // 90% of screen width
            height: MediaQuery.of(context).size.height * 0.6, // 60% of screen height
            padding: EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: <Widget>[
                Text(
                  'Детали продукта',
                  style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
                ),
                SizedBox(height: 16),
                Expanded(
                  child: SingleChildScrollView(
                    child: ListBody(
                      children: <Widget>[
                        Text('Тип: ${product.productType}', style: TextStyle(fontSize: 18)),
                        Text('Наим-е: ${product.productName}', style: TextStyle(fontSize: 18)),
                        Text('Ком-ий: ${product.productComment}', style: TextStyle(fontSize: 18)),
                        Text('Code: ${product.codeitem}', style: TextStyle(fontSize: 18)),
                        Text('Модель: ${product.productModel}', style: TextStyle(fontSize: 18)),
                        Text('Сезон: ${product.productSezon}', style: TextStyle(fontSize: 18)),
                        Text('Предназначение: ${product.productPerson}', style: TextStyle(fontSize: 18)),
                        Text('Цвет: ${product.productColor}', style: TextStyle(fontSize: 18)),
                        Text('Размер: ${product.productSize}', style: TextStyle(fontSize: 18)),
                        Text('Количество: ${product.productQuantity} ${product.productUnit}', style: TextStyle(fontSize: 18)),
                        Text('Цена себестоимость: ${product.productSebeStoimost}', style: TextStyle(fontSize: 18)),
                        Text('Цена всего себ-ти: ${product.productTotalSebestoimost}', style: TextStyle(fontSize: 18)),
                        Text('Цена для продажи: ${product.productSellingprice}', style: TextStyle(fontSize: 18)),
                        Text('Цена всего продажи: ${product.productTotalSelling}', style: TextStyle(fontSize: 18)),
                      ],
                    ),
                  ),
                ),
                SizedBox(height: 16),
                Align(
                  alignment: Alignment.bottomRight,
                  child: TextButton(
                    child: Text('Закрыть', style: TextStyle(fontSize: 18)),
                    onPressed: () {
                      Navigator.of(context).pop();
                    },
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Готовые продукты'),
      ),
      body: isLoading
          ? Center(child: CircularProgressIndicator())
          : errorMessage.isNotEmpty
              ? Center(child: Text(errorMessage))
              : ListView.builder(
                  itemCount: finishedProduct.length,
                  itemBuilder: (context, index) {
                    final takeProduct = finishedProduct[index];
                    return InkWell(
                      onTap: () => showProductDetails(takeProduct),
                      onLongPress: () => showEditPriceDialog(takeProduct),
                      child: Container(
                        height: 58,
                        margin: EdgeInsets.all(4.0),
                        padding: EdgeInsets.all(8.0),
                        decoration: BoxDecoration(
                          color: Colors.green,
                          borderRadius: BorderRadius.circular(8.0),
                        ),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Row(
                              children: [
                                Text('Наим-е: ${takeProduct.productName}', style: TextStyle(color: Colors.white)),
                                Spacer(),
                                Text('Model: ${takeProduct.productModel}', style: TextStyle(color: Colors.white)),
                              ],
                            ),
                            Row(
                              children: [
                                Text('Comment: ${takeProduct.productComment}', style: TextStyle(color: Colors.white)),
                                Spacer(),
                                Text('К-во: ${takeProduct.productQuantity}', style: TextStyle(color: Colors.white)),
                                Text(' ${takeProduct.productUnit}', style: TextStyle(color: Colors.white)),
                              ],
                            ),
                          ],
                        ),
                      ),
                    );
                  },
                ),
    );
  }
}